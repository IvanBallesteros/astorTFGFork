{
  "VARIANT_ID": "388",
  "VALIDATION": "|true|0|6|[]|",
  "patchhunks": [
    {
      "LOCATION": "java_programs.LEVENSHTEIN",
      "PATH": "C:\\\\astor\\\\examples\\\\quixbugscompiled\\\\levenshtein\\\\src\\\\java_programs\\\\LEVENSHTEIN.java",
      "INGREDIENT_SCOPE": "-",
      "SUSPICIOUNESS": "1",
      "INGREDIENT_PARENT": "java.lang.Math.min(\\r\\njava_programs.LEVENSHTEIN.levenshtein(_String_0, _String_1.substring(1)), \\r\\njava_programs.LEVENSHTEIN.levenshtein(_String_0.substring(1), _String_1.substring(1)))",
      "PATCH_HUNK_TYPE": "CtInvocationImpl|CtReturnImpl",
      "ORIGINAL_CODE": "1 + java_programs.LEVENSHTEIN.levenshtein(source.substring(1), target.substring(1))",
      "BUGGY_CODE_TYPE": "CtBinaryOperatorImpl|CtReturnImpl",
      "OPERATOR": "ExpressionReplaceOperator",
      "MODIFIED_FILE_PATH": "C:\\\\astor\\\\.\\\\output_astor\\\\AstorMain-levenshtein\\\\\\/src\\/\\\\variant-388\\\\java_programs\\\\LEVENSHTEIN.java",
      "LINE": "17",
      "MP_RANKING": "6",
      "PATCH_HUNK_CODE": "java.lang.Math.min(\\r\\njava_programs.LEVENSHTEIN.levenshtein(target, source.substring(1)), \\r\\njava_programs.LEVENSHTEIN.levenshtein(target.substring(1), source.substring(1)))"
    }
  ],
  "TIME": "136",
  "GENERATION": "194",
  "FOLDER_SOLUTION_CODE": "C:\\\\astor\\\\.\\\\output_astor\\\\AstorMain-levenshtein\\\\\\/src\\/\\\\variant-388",
  "PATCH_DIFF_ORIG": "--- C:\\\\astor\\\\examples\\\\quixbugscompiled\\\\levenshtein\\\\src\\\\java_programs\\\\LEVENSHTEIN.java\\n+++ C:\\\\astor\\\\examples\\\\quixbugscompiled\\\\levenshtein\\\\src\\\\java_programs\\\\LEVENSHTEIN.java\\n@@ -17,5 +17,5 @@\\n-\\t\\t\\treturn 1 + java_programs.LEVENSHTEIN.levenshtein(source.substring(1), target.substring(1));\\n-\\t\\t} else {\\n-\\t\\t\\treturn 1 + java.lang.Math.min(java.lang.Math.min(\\n-\\t\\t\\tjava_programs.LEVENSHTEIN.levenshtein(source, target.substring(1)), \\n-\\t\\t\\tjava_programs.LEVENSHTEIN.levenshtein(source.substring(1), target.substring(1))), \\n+\\t\\t\\treturn \\n+\\n+\\t\\t\\tjava.lang.Math.min(\\n+\\t\\t\\tjava_programs.LEVENSHTEIN.levenshtein(target, source.substring(1)), \\n+\\t\\t\\tjava_programs.LEVENSHTEIN.levenshtein(target.substring(1), source.substring(1)));} else { \\t\\t\\treturn 1 + java.lang.Math.min(java.lang.Math.min(java_programs.LEVENSHTEIN.levenshtein(source, target.substring(1)), java_programs.LEVENSHTEIN.levenshtein(source.substring(1), target.substring(1))), \\n\\n"
}